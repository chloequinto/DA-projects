library(zipfR)
install-packages(zipfR)
install.packages("zipfR")
library(zipfR)
?zipfR
adv <- readLines("brown_adverbs.txt", encoding="UTF-8")
head(adv, 30)
length(adv)
adv.tfl <- vec2tfl(adv)
N(adv.tfl)
V(adv.tfl)
adv.spc <- tfl2spc(adv.tfl)
adv.spc
adv.vgc <- vec2vgc (adv, m.max =2)
plot(adv.tfl)
plot(adv.spc)
plot(adv.vgc add.m = 1:2)
plot(adv.vgc,add.m = 1:2)
plot(adv.vgc,add.m = 1:2) #vocabulary growth plot
install.packages("pdftools")
library(pdftools)
download.file("https://www.apple.com/support/products/pdf/applecare_ipod_t_and_c_11182003.pdf")
download.file("https://www.apple.com/support/products/pdf/applecare_ipod_t_and_c_11182003.pdf", "C:\R Projects\zipfR_brown")
download.file("https://www.apple.com/support/products/pdf/applecare_ipod_t_and_c_11182003.pdf", "C:/R Projects/zipfR_brown")
download.file("tac_apple.pdf", encoding="UTF-8")
test <- readLines("tac_apple.pdf", encoding="UTF-8")
test <- readLines("tac_apple.pdf")
test <- readLines("https://www.apple.com/support/products/pdf/applecare_ipod_t_and_c_11182003.pdf")
download.file("https://www.apple.com/support/products/pdf/applecare_ipod_t_and_c_11182003.pdf", "tac_apple_2.pdf")
text <- pdf_text("tac_apple_2.pdf")
#lowercase all words
temp <- tolower(text)
#remove everything else
temp <- stringr::str_replace_all(text, "[^a-zA-Z\\s]", " ")
#one white space
temp <- stringr::str_replace_all(text, "[\\s]+", " ")
#split
temp <- stringr::split(temp, " ")[[1]]
#split
temp <- stringr::str_split(temp, " ")[[1]]
p == "")
if (length(indexes) > 0 ){
temp <- temp[-index
if (length(indexes) > 0 ){
text <- text[-indexes]
indexes <- which (text == "")
if (length(indexes) > 0 ){
text <- text[-indexes]
}
/
View(temp)
View(test)
View(text)
#lowercase all words
temp <- tolower(text)
text <- pdf_text("tac_apple_2.pdf")
book1 <- readLines("Sorcerer's Stone.txt", enconding="UTF-8")
book1 <- readLines("Sorcerer's Stone.txt", encoding="UTF-8")
head(book1, 30)
head(book1, 40)
head(book1, 100)
#lowercase all words
book1_clean <- tolower(text)
#remove everything else besides letters and numbers
book1_clean <- stringr::str_replace_all(text, "[^a-zA-Z\\s]", " ")
#lowercase all words
book1_clean <- tolower(book1)
#remove everything else besides letters and numbers
book1_clean <- stringr::str_replace_all(book1, "[^a-zA-Z\\s]", " ")
#one white space
book1_clean <- stringr::str_replace_all(book1, "[\\s]+", " ")
#split
book1_clean <- stringr::str_split(book1, " ")[[1]]
indexes <- which (book1 == "")
remove(book1_clean)
remove(temp)
remove(text)
remove(test)
remove(adv)
book1 <- readLines("Sorcerer's Stone.txt", encoding="UTF-8")
#lowercase all words
book1 <- tolower(book1)
#remove everything else besides letters and numbers
book1 <- stringr::str_replace_all(book1, "[^a-zA-Z\\s]", " ")
#one white space
book1 <- stringr::str_replace_all(book1, "[\\s]+", " ")
#split
book1 <- stringr::str_split(book1, " ")[[1]]
indexes <- which (book1 == "")
if (length(indexes) > 0 ){
book1 <- book1[-indexes]
}
/
View(book1)
book1 <- readLines("Sorcerer's Stone.txt", encoding="UTF-8")
#lowercase all words
book1 <- tolower(book1)
#remove everything else besides letters and numbers
book1 <- stringr::str_replace_all(book1, "[^a-zA-Z\\s]", " ")
#one white space
book1 <- stringr::str_replace_all(book1, "[\\s]+", " ")
#split
book1 <- stringr::str_split(book1, " ")[[1]]
book1 <- readLines("Sorcerer's Stone.txt", encoding="UTF-8")
#lowercase all words
book1 <- tolower(book1)
#remove everything else besides letters and numbers
book1 <- stringr::str_replace_all(book1, "[^a-zA-Z\\s]", " ")
#one white space
book1 <- stringr::str_replace_all(book1, "[\\s]+", " ")
#split
View(book1)
#split
book1 <- stringr::str_split(book1, " ")
View(book1)
View(book1[1])
head(book1, 100) #mathematically, a vector of tokens
length(book1)
View(book1[1])
View(book1[[1]])
View(book1)
indexes <- which (book1 == "")
if (length(indexes) > 0 ){
book1 <- book1[-indexes]
}
View(book1)
book1[[2]]
indexes <- which(book1 == "")
book1.tfl <- vec2tfl(book1)
head(book1, 100) #mathematically, a vector of tokens
length(book1)
book1.tfl <- vec2tfl(book1)
#data frame is list change to vectors
book1 <- as.data.frame(lapply(df, unlist))
#data frame is list change to vectors
book1 <- as.data.frame(lapply(book1, unlist))
require(reshape2)
book1$value <- rownames(book1)
melt(book1)
book1.tfl <- vec2tfl(book1)
#data frame is list change to vectors
book1 <- as.data.frame(lapply(book1, unlist))
require(reshape2)
book1$value <- rownames(book1)
melt(book1)
View(book1)
require(reshape2)
book1$value <- rownames(book1)
book1 <- melt(book1)
View(book1)
indexes <- which(book1 == "")
if (length(indexes) > 0 ){
book1 <- book1[-indexes]
}
/
indexes <- which(book1 == "")
View(book1)
book1.tfl <- vec2tfl(book1)
length(book1)
head(book1, 100) #mathematically, a vector of tokens
book1.tfl <- vec2tfl(book1)
head(book1, 100) #mathematically, a vector of tokens
View(book1$L1)
View(book1$L1) <- NULL
book1$L1 <- NULL
View(book1)
length(book1)
book1.tfl <- vec2tfl(book1)
head(book1, 100) #mathematically, a vector of tokens
length(book1) #sample-size
book1.tfl <- vec2tfl(book1)
write.table(book1, "book1.txt")
write.table(book1, "book1.txt", row.names = FALSE, column.names = FALSE)
write.table(book1, "book1.txt", row.names = FALSE)
book1 <- readLines("book1.txt")
View(book1)
book1 <- readLines("Sorcerer's Stone.txt", encoding="UTF-8")
#lowercase all words
book1 <- tolower(book1)
#remove everything else besides letters and numbers
book1 <- stringr::str_replace_all(book1, "[^a-zA-Z\\s]", " ")
#one white space
book1 <- stringr::str_replace_all(book1, "[\\s]+", " ")
#split
book1 <- stringr::str_split(book1, " ")
indexes <- which(book1 == "")
if (length(indexes) > 0 ){
book1 <- book1[-indexes]
}
View(book1)
require(reshape2)
book1$value <- rownames(book1)
book1 <- melt(book1)
book1$L1 <- NULL
View(book1)
adv <- readLines("brown_adverbs.txt", encoding="UTF-8")
view(adv)
View(adv)
